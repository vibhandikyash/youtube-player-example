/* eslint-disable */
// source: sfu/models.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var sfu_enums_pb = require('../sfu/enums_pb.js');
goog.object.extend(proto, sfu_enums_pb);
goog.exportSymbol('proto.sfu.api.v1.IceCandidate', null, global);
goog.exportSymbol('proto.sfu.api.v1.SfuConnectionOptions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sfu.api.v1.SfuConnectionOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sfu.api.v1.SfuConnectionOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sfu.api.v1.SfuConnectionOptions.displayName = 'proto.sfu.api.v1.SfuConnectionOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sfu.api.v1.IceCandidate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sfu.api.v1.IceCandidate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sfu.api.v1.IceCandidate.displayName = 'proto.sfu.api.v1.IceCandidate';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.sfu.api.v1.SfuConnectionOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sfu.api.v1.SfuConnectionOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.api.v1.SfuConnectionOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    useProto: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    useCompression: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    useTcp: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    iceRestart: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    mcuEmbedLayoutInFrames: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    exchangeCandidatesAsync: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sfu.api.v1.SfuConnectionOptions}
 */
proto.sfu.api.v1.SfuConnectionOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sfu.api.v1.SfuConnectionOptions;
  return proto.sfu.api.v1.SfuConnectionOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sfu.api.v1.SfuConnectionOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sfu.api.v1.SfuConnectionOptions}
 */
proto.sfu.api.v1.SfuConnectionOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseProto(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseCompression(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseTcp(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIceRestart(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMcuEmbedLayoutInFrames(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExchangeCandidatesAsync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sfu.api.v1.SfuConnectionOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sfu.api.v1.SfuConnectionOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.api.v1.SfuConnectionOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUseProto();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUseCompression();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getUseTcp();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIceRestart();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMcuEmbedLayoutInFrames();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getExchangeCandidatesAsync();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional bool use_proto = 1;
 * @return {boolean}
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.getUseProto = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sfu.api.v1.SfuConnectionOptions} returns this
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.setUseProto = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool use_compression = 2;
 * @return {boolean}
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.getUseCompression = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sfu.api.v1.SfuConnectionOptions} returns this
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.setUseCompression = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool use_tcp = 3;
 * @return {boolean}
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.getUseTcp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sfu.api.v1.SfuConnectionOptions} returns this
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.setUseTcp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool ice_restart = 4;
 * @return {boolean}
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.getIceRestart = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sfu.api.v1.SfuConnectionOptions} returns this
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.setIceRestart = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool mcu_embed_layout_in_frames = 5;
 * @return {boolean}
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.getMcuEmbedLayoutInFrames = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sfu.api.v1.SfuConnectionOptions} returns this
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.setMcuEmbedLayoutInFrames = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool exchange_candidates_async = 6;
 * @return {boolean}
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.getExchangeCandidatesAsync = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sfu.api.v1.SfuConnectionOptions} returns this
 */
proto.sfu.api.v1.SfuConnectionOptions.prototype.setExchangeCandidatesAsync = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sfu.api.v1.IceCandidate.prototype.toObject = function(opt_includeInstance) {
  return proto.sfu.api.v1.IceCandidate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sfu.api.v1.IceCandidate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.api.v1.IceCandidate.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    candidate: msg.getCandidate_asB64(),
    sfuType: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sfu.api.v1.IceCandidate}
 */
proto.sfu.api.v1.IceCandidate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sfu.api.v1.IceCandidate;
  return proto.sfu.api.v1.IceCandidate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sfu.api.v1.IceCandidate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sfu.api.v1.IceCandidate}
 */
proto.sfu.api.v1.IceCandidate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCandidate(value);
      break;
    case 4:
      var value = /** @type {!proto.sfu.api.v1.SfuType} */ (reader.readEnum());
      msg.setSfuType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sfu.api.v1.IceCandidate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sfu.api.v1.IceCandidate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sfu.api.v1.IceCandidate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.api.v1.IceCandidate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCandidate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSfuType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.sfu.api.v1.IceCandidate.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sfu.api.v1.IceCandidate} returns this
 */
proto.sfu.api.v1.IceCandidate.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes candidate = 3;
 * @return {string}
 */
proto.sfu.api.v1.IceCandidate.prototype.getCandidate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes candidate = 3;
 * This is a type-conversion wrapper around `getCandidate()`
 * @return {string}
 */
proto.sfu.api.v1.IceCandidate.prototype.getCandidate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCandidate()));
};


/**
 * optional bytes candidate = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCandidate()`
 * @return {!Uint8Array}
 */
proto.sfu.api.v1.IceCandidate.prototype.getCandidate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCandidate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.sfu.api.v1.IceCandidate} returns this
 */
proto.sfu.api.v1.IceCandidate.prototype.setCandidate = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional SfuType sfu_type = 4;
 * @return {!proto.sfu.api.v1.SfuType}
 */
proto.sfu.api.v1.IceCandidate.prototype.getSfuType = function() {
  return /** @type {!proto.sfu.api.v1.SfuType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.sfu.api.v1.SfuType} value
 * @return {!proto.sfu.api.v1.IceCandidate} returns this
 */
proto.sfu.api.v1.IceCandidate.prototype.setSfuType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


goog.object.extend(exports, proto.sfu.api.v1);
